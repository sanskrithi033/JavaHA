import java.io.IOException;
import java.lang.Math;
import Prog1Tools.IOTools;
import java.util.Random;
public class ZufallsPartikel extends Thread{
    private static int anzahl;
   private static ZufallsPartikel[] partikels= new ZufallsPartikel[anzahl];
    Position pos;
    int direction;
    ZufallsPartikel particle;
    ZufallsPartikel ss;
     char[][] arena;
    // int anzahl;
    private static int length;
    private static int breadth;
     public void run(){
//         int l = IOTools.readInt("Bitte Geben Sie die Laenge des Feldes ein : ");
//         int b = IOTools.readInt("Bitte Geben Sie die Breite des Feldes ein : ");
//int anzahl = IOTools.readInt("Biite Geben Sie die Anzahl der Partikel ein :");

//this.anzahl=anzahl;
         inititialize(length, breadth);
        runParticel();
         printToConsole();
     }

    public static void main(String[] args) throws IOException {
         ZufallsPartikel p = new ZufallsPartikel(new Position( length/2, breadth/2));
         int l = IOTools.readInt("Bitte Geben Sie die Laenge des Feldes ein : ");
         int b = IOTools.readInt("Bitte Geben Sie die Breite des Feldes ein : ");
         int anzahl = IOTools.readInt("Bitte Geben Sie die Anzahl der Partikel ein : ");
         ZufallsPartikel.anzahl=anzahl;
         ZufallsPartikel.length=l;
         ZufallsPartikel.breadth=b;
         for (int i = 0; i <partikels.length; i++) {
            partikels[i]=new ZufallsPartikel(new Position(length/1+i,breadth/1+i));
        }

        p.start();


     }
    public ZufallsPartikel(Position p) {
        direction = 90;
        pos = p;
    }
    int getX() {
        return pos.x;
    }
    int getY() {
        return pos.y;
    }
    Position move() {
        int rand = (int) (2 * Math.random());
        switch (rand) {
            case 0:
                direction = (direction + 270) % 360;
                break;
            case 1:
                pos.x += deltaX(direction);
                pos.y += deltaY(direction);
                break;
            default:
                System.out.println("Oh no, something went wrong");
                return null;
        }

        return new Position(pos.x, pos.y);
    }

     void inititialize(int width, int height) {
        arena = new char[height][width];
        inititalizeWithChar(arena, ' ');
        partikels=new ZufallsPartikel[anzahl];
         for (int i = 0; i < anzahl; i++) {
             partikels[i] =new ZufallsPartikel(new Position((int)Math.random()*100, (int)Math.random()*100));
         }
//        particle = new ZufallsPartikel(new Position(width / 2, height / 2));
//        ss= new ZufallsPartikel(new Position(width/4,height/4));
    }

     void runParticel() {
         int tmpx;
         int tmpy;
         for (int i = 0; i < anzahl; i++) {

             while (partikels[i].getX() != -1 && partikels[i].getY() != -1 && partikels[i].getX() != arena[0].length && partikels[i].getY()!= arena.length) {
                 tmpx = partikels[i].getX();
                 tmpy = partikels[i].getY();
//                 int a ;
//                 Random b = new Random();
//                a= b.nextInt();
                 char ch = (char)(i+97);
                 arena[tmpy][tmpx] = ch;
                 Position p = partikels[i].move();
                 try {
                     arena[p.y][p.x] = 'X';
                 } catch (ArrayIndexOutOfBoundsException e) {
                     arena[tmpy][tmpx] = 'X';
                 }
             }
         }
     }

     void printToConsole() {
        for (int j = 0; j < arena[0].length+2; j++)
            System.out.print("-");
        System.out.println("");

        for (int i = arena.length-1; i >= 0; i--) {
            System.out.print("|");
            System.out.print(arena[i]);
            System.out.println("|");
        }

        for (int j = 0; j < arena[0].length+2; j++)
            System.out.print("-");
        System.out.println("");
    }

    static int deltaX(int degree) {
        if (degree == 0) {
            return 1;
        }
        if (degree == 180) {
            return -1;
        }
        return 0;
    }
    static int deltaY(int degree) {
        if (degree == 90) {
            return 1;
        }
        if (degree == 270) {
            return -1;
        }
        return 0;
    }

     void inititalizeWithChar(char[][] a, char c) {
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                a[i][j] = c;
            }
        }
    }
}
class Position {
    int x;
    int y;

    public Position(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
